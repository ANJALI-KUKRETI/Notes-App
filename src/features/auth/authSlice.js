import { createSlice, isRejectedWithValue } from '@reduxjs/toolkit';
import { login, signup } from './authAPI'
const initialState = {
  user: undefined,
  status: 'loading',
  error:null
};



export const userSlice = createSlice({
  name: 'user',
  initialState,
  reducers: {
    setUser: (state,action) => {
      state.user = action.payload;
      state.status = 'idle'
    },
    removeUser: (state) => {
      state.user = null;
      state.status = 'idle'
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(signup.pending, (state) => {
        state.status = 'pending';
      })
      .addCase(signup.fulfilled, (state, action) => {
        
        state.status = 'idle';
        state.user = action.payload;
        state.error = null
      })
      .addCase(signup.rejected, (state, action) => {
        if(isRejectedWithValue(action)){
          state.status = 'idle';
          state.error = action.payload;
        }
      })
      .addCase(login.pending, (state) => {
        state.status = 'pending';
      })
      .addCase(login.fulfilled, (state, action) => {
        state.status = 'idle';
        state.user = action.payload;
        state.error = null
      })
      .addCase(login.rejected, (state, action) => {
        if(isRejectedWithValue(action)){
          state.status = 'idle';
          state.error = action.payload;
        }
      });
  },
});

export const { setUser, removeUser } = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUser = (state) => state.user;

export default userSlice.reducer;
